# -*- coding: utf-8 -*-
"""OPIM 244 Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16dhPRf4NfDYB1ubhUtOhbStznICXxnoU

# Main Objectives


*   Tool 1: Stock Price Forecasting & Visualization
* Tool 2: Option Pricing - Black-Scholes Model
  *   Determine BS Inputs from API Data
  * Sensitivity Analysis Graph
  * Delta Hedging Calculator
  * Binomial Tree Generation
* Tool 3: 2-Asset Portfolio Optimization
* Tool 4: Bond Duration/Convexity Calculation
"""

# Decision Support System:
print("Hello!")
print("1 - Stock Price Data Visualization & Forecasting")
print("2 - Option Pricing/Delta Hedging Tool")
print("3 - Portfolio Optimization")
print("4 - Bond Math")
tool_number = input("Please select which tool you would like to use (1-4): ")
if tool_number == "1":
  tool_1()
elif tool_number == "2":
  tool_2()
elif tool_number == "3":
  tool_3()
elif tool_number == "4":
  tool_4()
else:
  print("Invalid tool number")

# Tool 1
def tool_1():
  from getpass import getpass
  API_KEY = getpass("Please input your AlphaVantage API KEY: ")

  import pandas as pd
  # Import the CSV Data from AlphaVantage
  symbol = input("Please input the ticker symbol for your stock: ")
  symbol = symbol.upper()
  stock_data = pd.read_csv(f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&apikey={API_KEY}&datatype=csv')
  df = pd.DataFrame(stock_data)
  print(df)

  import plotly.express as px
  stock_chart = px.line(df,x="timestamp",y="adjusted_close",title=f"{symbol} Stock Price Over Time",labels={"timestamp":"Date","adjusted_close":"Price"})
  stock_chart.show()

# Tool 2
def tool_2():
  import numpy as np
  from scipy.stats import norm
  import matplotlib.pyplot as plt
  import pandas as pd

  option = input("Please enter the ticker symbol for the option: ")
  #expiry_date = input("Please enter the expiry date of your option: ")
  expiry_date = '12-18-2022'
  K = input("Please enter the strike price of your option: ")
  K = int(K)

  from getpass import getpass
  API_KEY = getpass("Please input your AlphaVantage API KEY: ")
  option_data = pd.read_csv(f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={option}&apikey={API_KEY}&datatype=csv')
  df = pd.DataFrame(option_data)
  S = df["adjusted_close"][0]
  df['returns'] = df["adjusted_close"].pct_change()
  sigma = df['returns'].std() * np.sqrt(252)
  print(df)
  r_data = pd.read_csv(f'https://www.alphavantage.co/query?function=TREASURY_YIELD&interval=monthly&maturity=10year&apikey={API_KEY}&datatype=csv')
  df_r = pd.DataFrame(r_data)
  r = df_r["value"][0] / 100
  T = 1


  N = norm.cdf
  print(S,K,T,r,sigma)
  def CallPrice(S, K, T, r, sigma): # Black-Scholes
    d_1 = (np.log(S/K) + (r + sigma**2/2)*T) / (sigma*np.sqrt(T))
    d_2 = d_1 - sigma * np.sqrt(T)
    return S * N(d_1) - K * np.exp(-r*T)*N(d_2)
  def PutPrice(S, K, T, r, sigma):
    d_1 = (np.log(S/K) + (r + sigma**2/2)*T) / (sigma*np.sqrt(T))
    d_2 = d_1 - sigma * np.sqrt(T)
    return K * np.exp(-r * T) * N(-d_2) - S * N(-d_1)
  print("The value of the call is", "{:.2f}".format(CallPrice(S,K,T,r,sigma)))
  print("The value of the put is","{:.2f}".format(PutPrice(S,K,T,r,sigma)))

  greeks_choice = input("View greeks?")
  if greeks_choice == "Y":
    print("GREEKS:")
    OptionDelta = norm.cdf(np.log(S/K) + (r + sigma**2/2)*T / (sigma*np.sqrt(T)))
    OptionGamma = norm.pdf(np.log(S/K) + (r + sigma**2/2)*T / (sigma*np.sqrt(T))) / (S * sigma * np.sqrt(T))
    OptionVega = norm.pdf(np.log(S/K) + (r + sigma**2/2)*T / (sigma*np.sqrt(T))) * S * np.sqrt(T)
    OptionTheta = (-S * norm.pdf(np.log(S/K) + (r + sigma**2/2)*T / (sigma*np.sqrt(T))) * sigma)/(2*np.sqrt(T)) - (r * K * np.exp(-r*T)*norm.cdf(np.log(S/K) + (r + sigma**2/2)*T / (sigma*np.sqrt(T))-(sigma*np.sqrt(T))))
    OptionRho = K * T * np.exp(-r*T)*norm.cdf(np.log(S/K) + (r + sigma**2/2)*T / (sigma*np.sqrt(T))-(sigma*np.sqrt(T)))
    print("Delta = ","{:.3f}".format(OptionDelta))
    print("Gamma = ","{:.3f}".format(OptionGamma))
    print("Vega = ","{:.3f}".format(OptionVega))
    print("Theta = ","{:.3f}".format(OptionTheta))
    print("Rho = ","{:.3f}".format(OptionRho))

  sensitivity_choice = input("View call-put parity graph?")
  if sensitivity_choice == "Y":
    S_min = input("Please input minimum asset price value: ")
    S_min = int(S_min)
    S_max = input("Please input maximum asset price value: ")
    S_max = int(S_max)
    S_range = np.arange(S_min,S_max,0.1)
    calls = [CallPrice(S,K,T,r,sigma) for S in S_range]
    puts = [PutPrice(S,K,T,r,sigma) for S in S_range]
    plt.plot(S_range,calls,label="Call Value")
    plt.plot(S_range,puts,label="Put Value")
    plt.xlabel("$S_0$")
    plt.ylabel("Value")
    plt.legend()
  



tool_2()

# Tool 3
def tool_3():
  from getpass import getpass
  API_KEY = getpass("Please input your AlphaVantage API KEY: ")

  import pandas as pd
  # Import the CSV Data from AlphaVantage
  symbol = input("Please input the ticker symbol for your stock: ")
  symbol = symbol.upper()
  stock_data = pd.read_csv(f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&apikey={API_KEY}&datatype=csv')
  df = pd.DataFrame(stock_data)
  print(df)

# Tool 4
def tool_4():
  from getpass import getpass
  API_KEY = getpass("Please input your AlphaVantage API KEY: ")

  import pandas as pd
  # Import the CSV Data from AlphaVantage
  symbol = input("Please input the ticker symbol for your stock: ")
  symbol = symbol.upper()
  stock_data = pd.read_csv(f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&apikey={API_KEY}&datatype=csv')
  df = pd.DataFrame(stock_data)
  print(df)